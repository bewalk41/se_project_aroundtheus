!function(){"use strict";class e{constructor(e,t,s,n){let{name:i,link:o,_id:r}=e;this._name=i,this._link=o,this._id=r,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=n}_setEventListener(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{"function"==typeof this._handleImageClick&&this._handleImageClick(this._link,this._name)}))}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){"function"==typeof this._handleDeleteClick&&this._handleDeleteClick(this._id,this._cardElement)}getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__header").textContent=this._name;const e=this._cardElement.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._setEventListener(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent="",e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}toggleButtonState(){this._toggleButtonState()}},s=class{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}},n=class extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".modal__form"),this._inputList=Array.from(this._form.querySelectorAll(".modal__input"))}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._form.reset(),this.close()}))}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}},i=class extends s{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".modal__image"),this._captionElement=this._popupElement.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._imageElement.src=s,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}};class o extends s{constructor(e,t){super(e),this._handleConfirm=t,this._confirmButton=null,this._cardId=null,this._cardElement=null}initialize(){this._confirmButton=this._popupElement.querySelector(".modal__button_confirm"),this._confirmButton||console.error("Confirm button not found in the popup.")}open(e,t){super.open(),this.initialize(),this._cardId=e,this._cardElement=t,this._setEventListeners()}_setEventListeners(){super.setEventListeners(),this._confirmButton&&this._confirmButton.addEventListener("click",(()=>{console.log("Delete request initiated for Card ID:",this._cardId),fetch(`https://around-api.en.tripleten-services.com/v1/cards/${this._cardId}`,{method:"DELETE",headers:{authorization:"Bearer f2772a6b-ab7a-4d91-8e26-99a73e7be810"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>{"This post has been deleted"===e.message?(this._cardElement.remove(),this.close()):console.error("Failed to delete card:",e)})).catch((e=>console.error("Error:",e)))}))}}var r=class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}},a=class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}};const l=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],c={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};document.addEventListener("DOMContentLoaded",(()=>{const s=document.querySelector("#profile-edit-button"),d=document.querySelector("#add-card-button"),u=new r({nameSelector:".profile__name",jobSelector:".profile__description"}),_=new t(c,document.querySelector("#profile-edit-modal .modal__form")),m=new t(c,document.querySelector("#add-card-modal .modal__form"));_.enableValidation(),m.enableValidation();const h=(e,t)=>{f.open({name:t,link:e})},p=new n("#profile-edit-modal",(e=>{u.setUserInfo({name:e.heading,job:e.description})})),E=new n("#add-card-modal",(e=>{const t=g({name:e.heading,link:e.description,_id:e._id});b.addItem(t)})),f=new i("#image-modal"),v=new o("#confirm-popup",(()=>{}));function g(t){return new e(t,"#card-template",h,((e,t)=>{v.open(e,t)})).getView()}p.setEventListeners(),E.setEventListeners(),f.setEventListeners(),v.setEventListeners();const b=new a({items:l,renderer:e=>{const t=g(e);b.addItem(t)}},".cards__list");b.renderItems(),s.addEventListener("click",(()=>{const e=u.getUserInfo();p.setInputValues({heading:e.name,description:e.job}),p.open(),_.resetValidation()})),d.addEventListener("click",(()=>{E.open(),m.toggleButtonState()}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(){"use strict";class e{constructor(e,t,s,n){let{name:r,link:o,_id:i}=e;this._name=r,this._link=o,this._id=i,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=n}_setEventListener(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{"function"==typeof this._handleImageClick&&this._handleImageClick(this._link,this._name)}))}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){"function"==typeof this._handleDeleteClick&&this._handleDeleteClick(this._id,this._cardElement)}getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__header").textContent=this._name;const e=this._cardElement.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._setEventListener(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent="",e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}toggleButtonState(){this._toggleButtonState()}},s=class{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}},n=class extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._form.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}},r=class extends s{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".modal__image"),this._captionElement=this._popupElement.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._imageElement.src=s,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}};class o extends s{constructor(e){super(e),this._confirmButton=this._popupElement.querySelector(".modal__button_confirm"),this._confirmButtonText=this._confirmButton.textContent}setConfirmationHandler(e){this._handleConfirm=e}open(e){super.open(),this._data=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleConfirm&&this._handleConfirm(this._data)}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._confirmButton.textContent=e?t:this._confirmButtonText}}var i=class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:s,avatar:n}=e;t&&(this._nameElement.textContent=t),s&&(this._jobElement.textContent=s),n&&(this._avatarElement.src=n)}setUserAvatar(e){this._avatarElement.src=e}};class a{constructor(e,t){let{items:s,renderer:n}=e;this._renderedItems=s||[],this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const l=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],c={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};var h=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_handleError(e){throw console.error("API Error:",e),e}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse).catch(this._handleError)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse).catch(this._handleError)}setUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify(e)}).then(this._checkResponse).catch(this._handleError)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify(e)}).then(this._checkResponse).catch(this._handleError)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify(e)}).then(this._checkResponse).catch(this._handleError)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f2772a6b-ab7a-4d91-8e26-99a73e7be810","Content-Type":"application/json"}});document.addEventListener("DOMContentLoaded",(()=>{const s=document.querySelector("#profile-edit-button"),d=document.querySelector("#add-card-button"),_=document.querySelector(".profile__image-button"),u=new i({nameSelector:".profile__name",jobSelector:".profile__description",avatarSelector:".profile__image"}),m=new t(c,document.querySelector("#profile-edit-modal .modal__form")),p=new t(c,document.querySelector("#add-card-modal .modal__form"));m.enableValidation(),p.enableValidation();const E=(e,t)=>{v.open({name:t,link:e})},f=new n("#profile-edit-modal",(e=>{f.renderLoading(!0),h.setUserInfo({name:e.heading,about:e.description}).then((()=>{u.setUserInfo({name:e.heading,job:e.description}),f.close()})).catch((e=>console.error(e))).finally((()=>f.renderLoading(!1)))})),g=new n("#add-card-modal",(e=>{g.renderLoading(!0);const t={name:e.heading,link:e.description};h.addCard(t).then((e=>{const t=L(e);S.addItem(t),g.close()})).catch((e=>console.error(e))).finally((()=>g.renderLoading(!1)))})),v=new r("#image-modal"),b=new o("#confirm-popup");b.setEventListeners(),b.setConfirmationHandler((e=>{let{cardId:t,cardElement:s}=e;b.renderLoading(!0),h.deleteCard(t).then((()=>{s.remove(),b.close()})).catch((e=>console.error(e))).finally((()=>b.renderLoading(!1)))})),f.setEventListeners(),g.setEventListeners(),v.setEventListeners();const C=new n("#profile-popup",(e=>{C.renderLoading(!0),h.setUserAvatar({avatar:e.description}).then((e=>{u.setUserAvatar(e.avatar),C.close()})).catch((e=>console.error(e))).finally((()=>C.renderLoading(!1)))}));function L(t){return new e(t,"#card-template",E,((e,t)=>{b.open({cardId:e,cardElement:t})}),((e,t,s)=>{t?h.dislikeCard(e).then((e=>{s.setIsLiked(!1)})).catch((e=>console.error(e))):h.likeCard(e).then((e=>{s.setIsLiked(!0)})).catch((e=>console.error(e)))})).getView()}C.setEventListeners();const S=new a({items:l,renderer:e=>{const t=L(e);S.addItem(t)}},".cards__list");s.addEventListener("click",(()=>{const e=u.getUserInfo();f.setInputValues({heading:e.name,description:e.job}),f.open(),m.resetValidation()})),d.addEventListener("click",(()=>{g.open(),p.toggleButtonState()})),_.addEventListener("click",(()=>{C.open()})),h.getUserInfo().then((e=>{u.setUserInfo(e)})).catch((e=>console.error("Error fetching user info:",e))),h.getInitialCards().then((e=>{console.log("Initial Cards:",e),S.renderItems(e)})).catch((e=>console.error("Error fetching initial cards:",e)))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,